Metadata-Version: 2.4
Name: themis
Version: 0.1.0
Summary: Code for analyzing THEMIS data
Author-email: Windsurf THEMIS <noreply@example.com>
License: MIT License
        
        Copyright (c) 2025 Franziska Zeuner
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# themis
Code for analyzing themis data

## Installation and setup

- **Create/activate conda env** (Python 3.12 recommended):
  - `conda create -n themis python=3.12`
  - `conda activate themis`
- **Install dependencies**:
  - `conda env update -n themis -f environment.yml`
- **Editable install of this package** (so imports like `from themis...` work everywhere and scripts don’t need sys.path hacks):
  - `pip install -e .`
  - This uses `pyproject.toml` with `src/` as the package root.

Get https://github.com/fzeuner/spectator, then:
  pip install -e spectator

On a fresh machine, repeat the above three steps to get started.

## Configuration-driven datasets (2025)

The module `src/themis/datasets/themis_datasets_2025.py` now supports loading dataset and data-reduction parameters from an external TOML configuration file. This lets you keep multiple dataset-specific configs without changing code.
- `auto_discover_files=True` selects the most relevant file per reduction level using the naming pattern (camera, data type, sequence), preferring `_fx` files when present.

### Create or copy a config

Use the example at `configs/sample_dataset_sr_2025-07-07.toml` as a template. Copy it and edit values for your run:

```
cp configs/sample_dataset_sr_2025-07-07.toml configs/my_run.toml
vim configs/my_run.toml
```

Key sections in the TOML file:

- `[dataset]` — line key, date, sequences, polarization states
- `[paths]` — base directory for rdata/pdata/inversion; optional overrides for figures and inversion
- `[params]` — reduction parameters such as `slit_width`

Example snippet:

```toml
[dataset]
line = "sr"
date = "2025-07-07"
sequence = 26
flat_sequence = 25
dark_sequence = 1
states = ["pQ", "mQ", "pU", "mU", "pV", "mV"]

[paths]
base = "/home/<user>/data/themis"
# figures = "/home/<user>/figures/themis/"     # optional
# inversion = "/home/<user>/data/themis/inversion"  # optional

[params]
slit_width = 0.33
```

### Load a config in Python

Use `get_config(config_path=...)` to populate the dataset variables from your TOML file. If you omit `config_path`, the module falls back to the built-in defaults.

```python
from themis.datasets import themis_datasets_2025 as ds

cfg = ds.get_config(
    config_path="configs/my_run.toml",   # or None to use defaults
    auto_discover_files=True,             # scan directories to pre-fill matching files per level
    auto_create_dirs=False,               # create rdata/pdata/figures/inversion if missing
)

print(cfg.directories)
print(cfg.dataset)
```

### Notes

- Python 3.12 environment is provided; the loader uses the stdlib `tomllib`.
- File types are fixed as `scan`, `dark`, `flat` to match existing code.
- `get_config()` resolves relative config paths automatically. It tries: as given (CWD), relative to project root, and under `project_root/configs/`.
- You can also pass the config path via an env var `THEMIS_CONFIG` (if your script supports it) or via a CLI flag (if implemented).

